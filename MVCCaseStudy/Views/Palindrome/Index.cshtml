@model MVCCaseStudy.Models.PalindromeViewModel
@{
    ViewBag.Title = "Palindrome Checker";
}

<h2>@ViewBag.Title.</h2>

@if (Model.DisplayResult)
{
    <h4>Enter in a positive integer.</h4>
    <hr />
    <div class="container">
        <div class="row">
            @Html.LabelFor(m => m.OriginalNumber, new { @class = "col-md-2 control-label" })
            <div class="col-md-10">
                @Html.Raw(Model.OriginalNumber)
            </div>
        </div>
        <div class="row">
            @Html.LabelFor(m => m.ReverseString, new { @class = "col-md-2 control-label" })
            <div class="col-md-10">
                @Html.Raw(Model.ReverseString)
            </div>
        </div>
        <div class="row">
            The Number is @{if (!Model.IsPalindrome)
                {<text>not</text> } } a Palindrome!
        </div>
        <div class="row">
            <div class="col-md-offset-2 col-md-10">
                @Html.ActionLink("Go Back", "Index", "Palindrome")
            </div>
        </div>
    </div>
}
@if (!Model.DisplayResult)
{
    using (Html.BeginForm("Index", "Palindrome", FormMethod.Post, new { @class = "form-horizontal", role = "form" }))
    {
        @Html.AntiForgeryToken()
        <h4>Enter in a positive integer.</h4>
        <hr />
        @Html.ValidationSummary("", new { @class = "text-danger" })
        <div class="form-group">
            @Html.LabelFor(m => m.OriginalNumber, new { @class = "col-md-2 control-label" })
            <div class="col-md-10">
               @Html.TextBoxFor(m => m.OriginalNumber, new { @class = "form-control" })
            </div>
        </div>
        <div class="form-group">
            <div class="col-md-offset-2 col-md-10">
                <input type="submit" class="btn btn-default" value="Submit" />
            </div>
        </div>
    }
}
@section Scripts {
    @Scripts.Render("~/bundles/jqueryval")
}
